# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: RootQuery
  mutation: RootMutation
}

type AuthData {
  avatar: String
  email: String
  name: String
  token: String!
  tokenExpiration: Int!
  userId: ID!
}

type Author {
  _id: ID!
  avatar: String
  name: String
}

type Comment {
  createdAt: String
  idAuthor: ID
  text: String
}

type Comments {
  _id: ID!
  comments: [Comment]
  createdAt: String
  idAuthor: ID!
  postId: ID!
  text: String!
}

type Event {
  _id: ID!
  creator: User!
  date: String!
  description: String!
  price: Float!
  title: String!
}

type Locations {
  _id: ID!
  city: String
  coordinates: [String]
  cover: String
  createdAt: String
  district: String
  idAuthor: String
  isType: String
  linkToPost: String
  region: String
  small_text: String
  street: String
  tags: [String]
  title: String
}

type LocationsUserList {
  _id: ID
  action: String
  createdAt: String
  locationId: String
  userId: String
}

type Post {
  _id: ID!
  author: Author!
  coordinates: [String]
  cover: String
  createdAt: String
  editor: String
  how_to_get_there: String
  isPrice: String
  isType: String
  likes: [String]
  link: String
  location: String
  locationId: String
  small_text: String
  tags: [String]
  text: String
  tickets: [String]
  title: String
  type_material: String
  views: Int
  work_time: String
}

type RootMutation {
  addComment(_id: ID!, idAuthor: ID!, text: String!): Comments
  addLike(postId: ID!, userId: ID!): Post
  addLocationsUserList(_id: ID, action: String, locationId: ID, userId: ID): LocationsUserList
  cancelPost(postId: ID!): Event!
  createComment(idAuthor: ID!, postId: ID!, text: String!): Comments
  createEvent(eventInput: EventInput): Event
  createLocations(locationsInput: LocationsInput): Locations
  createPost(postInput: PostInput): Post
  createUser(userInput: UserInput): User
  postEvent(eventId: ID!): Post!
  removeLike(postId: ID!, userId: ID!): Post
  removeLocationWithUserList(_id: ID!): LocationsUserList
}

type RootQuery {
  author(_id: ID!): Author
  comments(postId: ID!): [Comments]
  events: [Event!]!
  location(_id: ID!): Locations
  locationUser(locationId: ID!, userId: ID!): LocationsUserList
  locations: [Locations]
  locationsSort(types: [String]): [Locations]
  locationsUserList(action: String, userId: ID!): [LocationsUserList]
  login(email: String!, password: String!): AuthData!
  post(_id: ID!): Post!
  posts: [Post!]!
}

type User {
  _id: ID!
  email: String!
  password: String
}

input EventInput {
  date: String!
  description: String!
  price: Float!
  title: String!
}

input LocationsInput {
  city: String
  coordinates: [String]
  cover: String
  district: String
  idAuthor: String
  isType: String
  linkToPost: String
  region: String
  small_text: String
  street: String
  tags: [String]
  title: String
}

input PostInput {
  coordinates: [String]
  editor: String
  how_to_get_there: String
  idAuthor: ID
  isPrice: String
  isType: String
  link: String
  location: String
  photo: String
  small_text: String
  tags: [String]
  tickets: [String]
  title: String
  type_material: String
  work_time: String
}

input UserInput {
  email: String!
  name: String!
  password: String!
}
