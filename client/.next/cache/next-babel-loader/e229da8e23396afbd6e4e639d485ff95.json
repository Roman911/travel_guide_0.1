{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Field } from \"formik\";\nimport { css } from \"aphrodite/no-important\";\nimport baseStyles from '../../styles';\nimport styles from \"./styles\";\n\nconst Radio = ({\n  rest\n}) => {\n  const {\n    name,\n    label,\n    options\n  } = rest;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: css(styles.inputWrapper),\n    children: [/*#__PURE__*/_jsx(\"label\", {\n      htmlFor: name,\n      className: css(styles.label, styles.labelTouched),\n      children: label\n    }), /*#__PURE__*/_jsx(Field, {\n      name: name,\n      children: ({\n        field\n      }) => {\n        const {\n          value\n        } = field;\n        return /*#__PURE__*/_jsx(\"div\", {\n          className: css(baseStyles.flex),\n          children: options.map((option, index) => {\n            const label = option.id === value ? css(styles.labelRadio, styles.labelActive, baseStyles.boxShadow) : css(styles.labelRadio);\n            return /*#__PURE__*/_jsxs(React.Fragment, {\n              children: [/*#__PURE__*/_jsx(\"input\", _objectSpread(_objectSpread({\n                className: css(styles.inputRadio),\n                type: \"radio\",\n                id: option.id\n              }, field), {}, {\n                value: option.id,\n                checked: value === option.id\n              })), /*#__PURE__*/_jsxs(\"label\", {\n                className: css(baseStyles.flex, styles.labelWrapper),\n                htmlFor: option.id,\n                children: [/*#__PURE__*/_jsx(\"div\", {\n                  className: label\n                }), option.title]\n              })]\n            }, index);\n          })\n        });\n      }\n    })]\n  });\n};\n\nexport default Radio;","map":null,"metadata":{},"sourceType":"module"}