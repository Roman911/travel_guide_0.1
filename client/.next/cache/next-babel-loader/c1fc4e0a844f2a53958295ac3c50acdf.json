{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRouter } from \"next/router\";\nimport dynamic from \"next/dynamic\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport { Spin } from \"../../../Components\";\nimport { LocationInformation } from \"../../\";\nimport { MarkersController } from '../Components/MarkersController';\nvar Search = dynamic(function () {\n  return import('../../Search/Containers/Search');\n}, {\n  loading: function loading() {\n    return /*#__PURE__*/_jsx(Spin, {});\n  },\n  loadableGenerated: {\n    webpack: function webpack() {\n      return [require.resolveWeak('../../Search/Containers/Search')];\n    },\n    modules: ['../../Search/Containers/Search']\n  }\n});\nvar libraries = [\"places\"];\nexport var GoogleMaps = function GoogleMaps(_ref) {\n  var mapContainerStyle = _ref.mapContainerStyle,\n      center = _ref.center,\n      zoom = _ref.zoom,\n      locations = _ref.locations,\n      disableDefaultUI = _ref.disableDefaultUI,\n      click = _ref.click,\n      search = _ref.search;\n\n  var _useLoadScript = useLoadScript({\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\n    // @ts-ignore\n    libraries: libraries\n  }),\n      isLoaded = _useLoadScript.isLoaded,\n      loadError = _useLoadScript.loadError;\n\n  var router = useRouter();\n\n  var _useState = useState({\n    control: 'null',\n    options: null\n  }),\n      marker = _useState[0],\n      setMarker = _useState[1];\n\n  var _useState2 = useState(null),\n      centerMap = _useState2[0],\n      setCenterMap = _useState2[1];\n\n  useEffect(function () {\n    setCenterMap(center);\n  }, [center]);\n  useEffect(function () {\n    if (Object.keys(router.query).length !== 0) {\n      if (!router.query.id) {\n        setMarker({\n          control: 'MarkerQuery',\n          options: router.query\n        });\n      } else {\n        setMarker({\n          control: 'MarkerQuery',\n          options: locations\n        });\n      }\n    } else if (locations) {\n      setMarker({\n        control: 'MarkersMap',\n        options: {\n          setSelectedPark: setSelectedPark,\n          locations: locations\n        }\n      });\n    }\n  }, [router, locations]);\n  var mapRef = useRef();\n  var onMapLoad = useCallback(function (map) {\n    mapRef.current = map;\n  }, []);\n  var panTo = useCallback(function (_ref2) {\n    var lat = _ref2.lat,\n        lng = _ref2.lng;\n    // @ts-ignore\n    mapRef.current.panTo({\n      lat: lat,\n      lng: lng\n    }); // @ts-ignore\n\n    mapRef.current.setZoom(12);\n    setMarker({\n      control: 'MarkerQuery',\n      options: center\n    });\n  }, []);\n\n  var _useState3 = useState(null),\n      selectedPark = _useState3[0],\n      setSelectedPark = _useState3[1];\n\n  var _useState4 = useState(false),\n      closeWindow = _useState4[0],\n      setCloseWindow = _useState4[1];\n\n  var handleClick = useCallback(function () {\n    setCloseWindow(true);\n    setTimeout(function () {\n      setSelectedPark(null);\n      setCloseWindow(false);\n    }, 700);\n  }, []);\n  var options = {\n    disableDefaultUI: disableDefaultUI\n  };\n\n  var renderMap = function renderMap() {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: [search && /*#__PURE__*/_jsx(Search, {\n        panTo: panTo\n      }), /*#__PURE__*/_jsxs(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: zoom,\n        center: centerMap,\n        options: options,\n        onLoad: onMapLoad,\n        onClick: click ? function (event) {\n          click(event);\n          setMarker({\n            control: 'MarkerQuery',\n            options: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng()\n            }\n          });\n        } : null,\n        children: [selectedPark && /*#__PURE__*/_jsx(LocationInformation, {\n          _id: selectedPark,\n          handleClick: handleClick,\n          closeWindow: closeWindow\n        }), /*#__PURE__*/_jsx(MarkersController, {\n          control: marker.control,\n          options: marker.options\n        })]\n      })]\n    });\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n    });\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/_jsx(Spin, {});\n};","map":null,"metadata":{},"sourceType":"module"}