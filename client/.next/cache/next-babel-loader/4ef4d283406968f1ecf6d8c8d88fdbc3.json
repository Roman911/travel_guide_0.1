{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\GoogleMaps\\\\Containers\\\\GoogleMaps.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport { Spin } from \"../../../Components\";\nimport { LocationInformation } from \"../../\";\nimport { Search } from \"../../../Containers/GoogleMaps/Search\";\nimport { MarkersController } from '../Components/MarkersController';\nvar libraries = [\"places\"];\nexport var GoogleMaps = function GoogleMaps(_ref) {\n  _s();\n\n  var mapContainerStyle = _ref.mapContainerStyle,\n      center = _ref.center,\n      zoom = _ref.zoom,\n      locations = _ref.locations,\n      disableDefaultUI = _ref.disableDefaultUI,\n      click = _ref.click,\n      search = _ref.search,\n      isType = _ref.isType;\n\n  var _useLoadScript = useLoadScript({\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\n    // @ts-ignore\n    libraries: libraries\n  }),\n      isLoaded = _useLoadScript.isLoaded,\n      loadError = _useLoadScript.loadError;\n\n  var router = useRouter();\n\n  var _useState = useState({\n    control: 'null',\n    options: null\n  }),\n      marker = _useState[0],\n      setMarker = _useState[1];\n\n  var _useState2 = useState(null),\n      centerMap = _useState2[0],\n      setCenterMap = _useState2[1];\n\n  useEffect(function () {\n    setCenterMap(center);\n  }, [center]);\n  useEffect(function () {\n    if (Object.keys(router.query).length !== 0) {\n      if (!router.query.id) {\n        setMarker({\n          control: 'MarkerQuery',\n          options: router.query\n        });\n      } else {\n        setMarker({\n          control: 'MarkerQuery',\n          options: locations\n        });\n      }\n    } else if (locations) {\n      setMarker({\n        control: 'MarkersMap',\n        options: {\n          setSelectedPark: setSelectedPark,\n          locations: locations\n        }\n      });\n    }\n  }, [router, locations]);\n  var mapRef = useRef();\n  var onMapLoad = useCallback(function (map) {\n    mapRef.current = map;\n  }, []);\n  var panTo = useCallback(function (_ref2) {\n    var lat = _ref2.lat,\n        lng = _ref2.lng;\n    // @ts-ignore\n    mapRef.current.panTo({\n      lat: lat,\n      lng: lng\n    }); // @ts-ignore\n\n    mapRef.current.setZoom(12);\n    setMarker({\n      control: 'MarkerQuery',\n      options: center\n    });\n    setCenterMap({\n      lat: lat,\n      lng: lng\n    });\n  }, []);\n  console.log(centerMap);\n\n  var _useState3 = useState(null),\n      selectedPark = _useState3[0],\n      setSelectedPark = _useState3[1];\n\n  var _useState4 = useState(false),\n      closeWindow = _useState4[0],\n      setCloseWindow = _useState4[1];\n\n  var handleClick = useCallback(function () {\n    setCloseWindow(true);\n    setTimeout(function () {\n      setSelectedPark(null);\n      setCloseWindow(false);\n    }, 700);\n  }, []);\n  var options = {\n    disableDefaultUI: disableDefaultUI\n  };\n\n  var renderMap = function renderMap() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: [search && /*#__PURE__*/_jsxDEV(Search, {\n        panTo: panTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 19\n      }, _this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: zoom,\n        center: centerMap,\n        options: options,\n        onLoad: onMapLoad,\n        onClick: click ? function (event) {\n          click(event);\n          setMarker({\n            control: 'MarkerQuery',\n            options: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng()\n            }\n          });\n        } : null,\n        children: [selectedPark && /*#__PURE__*/_jsxDEV(LocationInformation, {\n          _id: selectedPark,\n          handleClick: handleClick,\n          closeWindow: closeWindow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 27\n        }, _this), /*#__PURE__*/_jsxDEV(MarkersController, {\n          control: marker.control,\n          options: marker.options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 12\n    }, _this);\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 12\n    }, _this);\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 35\n  }, _this);\n};\n\n_s(GoogleMaps, \"U4VSyqE8Z/AbW/4tgM8ba+d7QnY=\", false, function () {\n  return [useLoadScript, useRouter];\n});\n\n_c = GoogleMaps;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleMaps\");","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/GoogleMaps/Containers/GoogleMaps.tsx"],"names":["useRouter","React","useCallback","useEffect","useRef","useState","GoogleMap","useLoadScript","Spin","LocationInformation","Search","MarkersController","libraries","GoogleMaps","mapContainerStyle","center","zoom","locations","disableDefaultUI","click","search","isType","googleMapsApiKey","process","env","GOOGLE_MAPS_KAY","isLoaded","loadError","router","control","options","marker","setMarker","centerMap","setCenterMap","Object","keys","query","length","id","setSelectedPark","mapRef","onMapLoad","map","current","panTo","lat","lng","setZoom","console","log","selectedPark","closeWindow","setCloseWindow","handleClick","setTimeout","renderMap","position","width","event","latLng"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\"\r\nimport React, {useCallback, useEffect, useRef, useState} from \"react\"\r\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api'\r\nimport { Spin } from \"../../../Components\"\r\nimport { LocationInformation } from \"../../\"\r\nimport { Search } from \"../../../Containers/GoogleMaps/Search\"\r\nimport { Locations } from \"../../../types/locations\"\r\n\r\nimport { MarkersController } from '../Components/MarkersController'\r\n\r\ntype MyGoogleMapsProps = {\r\n  mapContainerStyle: { height: string, width: string }\r\n  center: { lat: number, lng: number }\r\n  zoom: number\r\n  locations?: Locations\r\n  disableDefaultUI: boolean\r\n  click?: (event) => any\r\n  search: boolean\r\n  isType?: string | null\r\n}\r\n\r\nconst libraries = [\"places\"]\r\n\r\nexport const GoogleMaps: React.FC<MyGoogleMapsProps> = ({ mapContainerStyle, center, zoom, locations, disableDefaultUI, click, search, isType }) => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\r\n    // @ts-ignore\r\n    libraries\r\n  })\r\n  const router = useRouter()\r\n  const [ marker, setMarker ] = useState( { control: 'null', options: null } )\r\n  const [ centerMap, setCenterMap ] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setCenterMap(center)\r\n  }, [center])\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(router.query).length !== 0) {\r\n      if (!router.query.id) {\r\n        setMarker({\r\n          control: 'MarkerQuery',\r\n          options: router.query\r\n        })\r\n      } else {\r\n        setMarker({\r\n          control: 'MarkerQuery',\r\n          options: locations\r\n        })\r\n      }\r\n    } else if (locations) {\r\n      setMarker({\r\n        control: 'MarkersMap',\r\n        options: {\r\n          setSelectedPark: setSelectedPark,\r\n          locations: locations\r\n        },\r\n      })\r\n    }\r\n  }, [ router, locations ])\r\n\r\n  const mapRef = useRef()\r\n  const onMapLoad = useCallback((map) => {\r\n    mapRef.current = map\r\n  }, [])\r\n  const panTo = useCallback(({ lat, lng }) => {\r\n    // @ts-ignore\r\n    mapRef.current.panTo({ lat, lng })\r\n    // @ts-ignore\r\n    mapRef.current.setZoom(12)\r\n    setMarker({\r\n      control: 'MarkerQuery',\r\n      options: center\r\n    })\r\n    setCenterMap({ lat, lng })\r\n  }, [])\r\n\r\n  console.log(centerMap)\r\n\r\n  const [ selectedPark, setSelectedPark ] = useState<null | string>(null)\r\n  const [ closeWindow, setCloseWindow ] = useState<boolean>(false)\r\n  const handleClick = useCallback(() => {\r\n    setCloseWindow(true)\r\n    setTimeout(() => {\r\n      setSelectedPark(null)\r\n      setCloseWindow(false)\r\n    }, 700)\r\n  }, [])\r\n  const options = {\r\n    disableDefaultUI: disableDefaultUI\r\n  }\r\n  const renderMap = () => {\r\n    return <div style={{position: 'relative', width: '100%'}}>\r\n      { search && <Search panTo={ panTo } /> }\r\n      <GoogleMap\r\n        mapContainerStyle={ mapContainerStyle }\r\n        zoom={ zoom }\r\n        center={ centerMap }\r\n        options={ options }\r\n        onLoad={ onMapLoad }\r\n        onClick={ click ? (event) => {\r\n          click(event)\r\n          setMarker({\r\n            control: 'MarkerQuery',\r\n            options: {\r\n              lat: event.latLng.lat(),\r\n              lng: event.latLng.lng()\r\n            }\r\n          })\r\n        } : null}\r\n      >\r\n        { selectedPark && <LocationInformation _id={ selectedPark } handleClick={ handleClick } closeWindow={ closeWindow } /> }\r\n        <MarkersController control={ marker.control } options={ marker.options } />\r\n      </GoogleMap>\r\n    </div>\r\n  }\r\n  if (loadError) {\r\n    return <div>Неможливо завантажити карту</div>\r\n  }\r\n  return isLoaded ? renderMap() : <Spin />\r\n}"]},"metadata":{},"sourceType":"module"}