{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\CreateLocation\\\\Containers\\\\CreateLocationSelector.tsx\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useFormikContext, Formik, Form } from \"formik\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { css } from \"aphrodite/no-important\";\nimport * as Yup from 'yup';\nimport { addLocationMutation } from \"./mutations\";\nimport { modalActions } from '../../../redux/actions';\nimport baseStyle from '../../../styles';\nimport styles from '../Components/styles';\nimport { CreateLocation } from \"../Components/CreateLocation\";\nexport const CreateLocationSelector = ({\n  latLng,\n  isTypeSelect\n}) => {\n  const dispatch = useDispatch();\n  const {\n    data\n  } = useSelector(state => state.user);\n  const [createLocations] = useMutation(addLocationMutation);\n  const initialValues = {\n    title: '',\n    cover: '',\n    small_text: '',\n    linkToPost: '',\n    coordinateY: '0.00000',\n    coordinateX: '0.00000',\n    isType: 'other',\n    region: '',\n    district: '',\n    city: '',\n    street: ''\n  };\n  const validationSchema = Yup.object({\n    title: Yup.string().min(5, 'Коротка назва').max(50, 'Дуже велика назва').required('Required')\n  });\n\n  const onSubmit = (values, onSubmitProps) => {\n    const coordinates = [values.coordinateY, values.coordinateX];\n    const idAuthor = data ? data.userId : null;\n    createLocations({\n      variables: {\n        locationsInput: {\n          idAuthor: idAuthor,\n          title: values.title,\n          cover: values.cover,\n          linkToPost: values.linkToPost,\n          small_text: values.small_text,\n          coordinates: coordinates,\n          isType: values.isType,\n          region: values.region,\n          district: values.district,\n          city: values.city,\n          street: values.street\n        }\n      }\n    }).then(data => {\n      if (data) {\n        dispatch(modalActions.showModal('Локація успішно добавлена!'));\n        onSubmitProps.resetForm();\n      }\n\n      onSubmitProps.setSubmitting(false);\n    }).catch(() => {\n      onSubmitProps.setSubmitting(false);\n    });\n  };\n\n  const AutoRef = () => {\n    const {\n      values,\n      setFieldValue\n    } = useFormikContext();\n    useEffect(() => {\n      if (latLng) {\n        setFieldValue('coordinateY', String(latLng.coordinateY));\n        setFieldValue('coordinateX', String(latLng.coordinateX));\n      }\n    }, [latLng]);\n    useEffect(() => {\n      // @ts-ignore\n      isTypeSelect(values.isType); // @ts-ignore\n    }, [values.isType]);\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css(baseStyle.boxShadow, styles.wrapper),\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: onSubmit,\n      validationSchema: validationSchema,\n      children: formik => {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(CreateLocation, {\n            formik: formik\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(AutoRef, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 16\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/CreateLocation/Containers/CreateLocationSelector.tsx"],"names":["React","useEffect","useDispatch","useSelector","useFormikContext","Formik","Form","useMutation","css","Yup","addLocationMutation","modalActions","baseStyle","styles","CreateLocation","CreateLocationSelector","latLng","isTypeSelect","dispatch","data","state","user","createLocations","initialValues","title","cover","small_text","linkToPost","coordinateY","coordinateX","isType","region","district","city","street","validationSchema","object","string","min","max","required","onSubmit","values","onSubmitProps","coordinates","idAuthor","userId","variables","locationsInput","then","showModal","resetForm","setSubmitting","catch","AutoRef","setFieldValue","String","boxShadow","wrapper","formik"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useFormikContext, Formik, Form } from \"formik\"\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { css } from \"aphrodite/no-important\"\r\nimport * as Yup from 'yup'\r\nimport { addLocationMutation } from \"./mutations\"\r\nimport { modalActions } from '../../../redux/actions'\r\nimport baseStyle from '../../../styles'\r\nimport styles from '../Components/styles'\r\nimport { User } from \"../../../types/user\"\r\nimport { CreateLocation } from \"../Components/CreateLocation\"\r\n\r\ntype clsProps = {\r\n  latLng: {\r\n    coordinateY: number,\r\n    coordinateX: number\r\n  } | null\r\n  isTypeSelect: ( arg: string ) => void\r\n}\r\n\r\nexport const CreateLocationSelector: React.FC<clsProps> = ({ latLng, isTypeSelect }): any => {\r\n  const dispatch = useDispatch()\r\n  const { data } = useSelector((state: { user: User }) => state.user)\r\n  const [ createLocations ] = useMutation(addLocationMutation)\r\n  const initialValues = { title: '', cover: '', small_text: '', linkToPost: '', coordinateY: '0.00000', coordinateX: '0.00000', isType: 'other', region: '', district: '', city: '', street: '' }\r\n  const validationSchema = Yup.object({\r\n    title: Yup.string()\r\n      .min(5, 'Коротка назва')\r\n      .max(50, 'Дуже велика назва')\r\n      .required('Required')\r\n  })\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    const coordinates = [ values.coordinateY, values.coordinateX ]\r\n    const idAuthor = data ? data.userId : null\r\n    createLocations({\r\n      variables: {\r\n        locationsInput: {\r\n          idAuthor: idAuthor,\r\n          title: values.title,\r\n          cover: values.cover,\r\n          linkToPost: values.linkToPost,\r\n          small_text: values.small_text,\r\n          coordinates: coordinates,\r\n          isType: values.isType,\r\n          region: values.region,\r\n          district: values.district,\r\n          city: values.city,\r\n          street: values.street\r\n        }\r\n      }\r\n    }).then(data => {\r\n      if (data) {\r\n        dispatch(modalActions.showModal('Локація успішно добавлена!'))\r\n        onSubmitProps.resetForm()\r\n      }\r\n      onSubmitProps.setSubmitting(false)\r\n    }).catch( () => {\r\n      onSubmitProps.setSubmitting(false)\r\n    })\r\n  }\r\n  const AutoRef = () => {\r\n    const { values, setFieldValue } = useFormikContext()\r\n    useEffect(() => {\r\n      if (latLng) {\r\n        setFieldValue( 'coordinateY', String(latLng.coordinateY) )\r\n        setFieldValue( 'coordinateX', String(latLng.coordinateX) )\r\n      }\r\n    }, [latLng])\r\n    useEffect(() => {\r\n      // @ts-ignore\r\n      isTypeSelect(values.isType)\r\n      // @ts-ignore\r\n    }, [values.isType])\r\n    return null\r\n  }\r\n\r\n  return <div className={css(baseStyle.boxShadow, styles.wrapper)}>\r\n    <Formik initialValues={ initialValues } onSubmit={ onSubmit } validationSchema={ validationSchema }>\r\n      {formik => {\r\n        return <Form>\r\n          <CreateLocation formik={ formik } />\r\n          <AutoRef />\r\n        </Form>\r\n      }}\r\n    </Formik>\r\n  </div>\r\n}"]},"metadata":{},"sourceType":"module"}