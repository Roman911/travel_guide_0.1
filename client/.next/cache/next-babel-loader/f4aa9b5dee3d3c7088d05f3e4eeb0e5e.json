{"ast":null,"code":"import _slicedToArray from \"D:/web/travel_guide/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\pages\\\\login.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport { Formik, Form } from 'formik';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { loginQuery } from '../apollo/queries/login';\nimport validateForm from '../utils/validate';\nimport { Loading, MainLayout, HeaderForm, AuthForm } from \"../Components\";\nimport withApollo from \"../lib/withApollo\";\nimport { userActions, modalActions } from '../redux/actions';\n\nvar Login = function Login() {\n  _s();\n\n  var router = useRouter();\n  var dispatch = useDispatch();\n\n  var _useLazyQuery = useLazyQuery(loginQuery),\n      _useLazyQuery2 = _slicedToArray(_useLazyQuery, 2),\n      userData = _useLazyQuery2[0],\n      _useLazyQuery2$ = _useLazyQuery2[1],\n      loading = _useLazyQuery2$.loading,\n      data = _useLazyQuery2$.data,\n      error = _useLazyQuery2$.error;\n\n  var initialValues = {\n    email: '',\n    password: ''\n  };\n\n  var validate = function validate(values) {\n    var errors = {};\n    validateForm({\n      values: values,\n      errors: errors\n    });\n    return errors;\n  };\n\n  var onSubmit = function onSubmit(values, onSubmitProps) {\n    userData({\n      variables: {\n        email: values.email,\n        password: values.password\n      }\n    });\n    onSubmitProps.setSubmitting(false);\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, _this);\n\n  if (error) {\n    dispatch(modalActions.showModal('Неправильний логін або пароль'));\n  }\n\n  if (data) {\n    var login = data.login;\n    dispatch(userActions.setData(login));\n    localStorage.setItem('userData', JSON.stringify({\n      userId: login.userId,\n      token: login.token,\n      name: login.name,\n      avatar: login.avatar,\n      email: login.email\n    }));\n    dispatch(modalActions.showModal('Ви успішно увійшли!'));\n    router.push('/').then(function (r) {\n      return r;\n    });\n  }\n\n  var dataForm = [{\n    control: 'input',\n    id: 'email',\n    type: 'email',\n    label: 'Введіть email'\n  }, {\n    control: 'input',\n    id: 'password',\n    type: 'password',\n    label: 'Введіть пароль'\n  }];\n  return /*#__PURE__*/_jsxDEV(MainLayout, {\n    title: \"\\u0412\\u0445\\u0456\\u0434\",\n    auth: true,\n    children: [/*#__PURE__*/_jsxDEV(HeaderForm, {\n      title: \"\\u0412\\u0445\\u0456\\u0434\",\n      text: \"\\u0423 \\u0432\\u0430\\u0441 \\u0449\\u0435 \\u043D\\u0435\\u043C\\u0430 \\u0430\\u043A\\u0430\\u0443\\u043D\\u0442\\u0430?\",\n      link: \"/registration\",\n      btn: \"\\u0421\\u0442\\u0432\\u043E\\u0440\\u0438\\u0442\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }, _this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: onSubmit,\n      validate: validate,\n      children: function children(formik) {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(AuthForm, {\n            formik: formik,\n            dataForm: dataForm,\n            btn: \"\\u0423\\u0432\\u0456\\u0439\\u0442\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 16\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Login, \"iy6NU4CsaMkE/rJbiRv0cZ5zHos=\", false, function () {\n  return [useRouter, useDispatch, useLazyQuery];\n});\n\n_c = Login;\nexport default _c2 = withApollo(Login);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Login\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/web/travel_guide/client/pages/login.tsx"],"names":["React","useRouter","useDispatch","Formik","Form","useLazyQuery","loginQuery","validateForm","Loading","MainLayout","HeaderForm","AuthForm","withApollo","userActions","modalActions","Login","router","dispatch","userData","loading","data","error","initialValues","email","password","validate","values","errors","onSubmit","onSubmitProps","variables","setSubmitting","showModal","login","setData","localStorage","setItem","JSON","stringify","userId","token","name","avatar","push","then","r","dataForm","control","id","type","label","formik"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport { useRouter } from \"next/router\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport { Formik, Form } from 'formik'\r\nimport { useLazyQuery } from '@apollo/react-hooks'\r\nimport { css } from \"aphrodite/no-important\"\r\nimport { loginQuery } from '../apollo/queries/login'\r\nimport validateForm from '../utils/validate'\r\nimport { Loading, MainLayout, HeaderForm, AuthForm } from \"../Components\"\r\nimport loginStyles from '../styles/login'\r\nimport withApollo from \"../lib/withApollo\"\r\nimport { userActions, modalActions } from '../redux/actions'\r\n\r\nconst Login: React.FC = () => {\r\n  const router = useRouter()\r\n  const dispatch = useDispatch()\r\n  const [ userData, { loading, data, error } ] = useLazyQuery( loginQuery )\r\n  const initialValues = { email: '', password: '' }\r\n  const validate = values => {\r\n    let errors = {}\r\n    validateForm({ values, errors })\r\n    return errors\r\n  }\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    userData({\r\n      variables: { email: values.email, password: values.password },\r\n    })\r\n    onSubmitProps.setSubmitting(false)\r\n  }\r\n  if (loading) return <Loading />\r\n  if (error) {\r\n    dispatch(modalActions.showModal('Неправильний логін або пароль'))\r\n  }\r\n  if (data) {\r\n    const { login } = data\r\n    dispatch(userActions.setData(login))\r\n    localStorage.setItem('userData', JSON.stringify({\r\n      userId: login.userId, token: login.token, name: login.name, avatar: login.avatar, email: login.email\r\n    }))\r\n    dispatch(modalActions.showModal('Ви успішно увійшли!'))\r\n    router.push('/').then(r => r)\r\n  }\r\n\r\n  const dataForm = [\r\n    {\r\n      control: 'input',\r\n      id: 'email',\r\n      type: 'email',\r\n      label: 'Введіть email'\r\n    },\r\n    {\r\n      control: 'input',\r\n      id: 'password',\r\n      type: 'password',\r\n      label: 'Введіть пароль'\r\n    }\r\n  ]\r\n\r\n  return <MainLayout title='Вхід' auth={ true } >\r\n    <HeaderForm title='Вхід' text='У вас ще нема акаунта?' link='/registration' btn='Створити' />\r\n    <Formik initialValues={ initialValues } onSubmit={ onSubmit } validate={ validate } >\r\n      {formik => {\r\n        return <Form>\r\n          <AuthForm formik={ formik } dataForm={ dataForm } btn='Увійти' />\r\n        </Form>\r\n      }}\r\n    </Formik>\r\n  </MainLayout>\r\n}\r\n\r\nexport default withApollo(Login)"]},"metadata":{},"sourceType":"module"}