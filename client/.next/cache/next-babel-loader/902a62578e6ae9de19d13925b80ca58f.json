{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport searchStyles from '../../styles/search';\nimport { css } from \"aphrodite/no-important\";\nexport const Search = ({\n  panTo\n}) => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      // @ts-ignore\n      location: {\n        lat: () => 49.026151,\n        lng: () => 31.483070\n      },\n      radius: 50 * 1000\n    }\n  });\n  const {\n    handleSubmit,\n    handleChange,\n    handleBlur\n  } = useFormik({\n    initialValues: {\n      description: ''\n    },\n    onSubmit: async values => {\n      setValue(values.description, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address: values.description\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: css(searchStyles.wrapper),\n    children: /*#__PURE__*/_jsxs(\"form\", {\n      onClick: handleSubmit,\n      className: css(searchStyles.form),\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        className: css(searchStyles.input),\n        type: \"text\",\n        value: value,\n        onChange: e => {\n          setValue(e.target.value);\n        },\n        disabled: !ready,\n        placeholder: \"\\u041F\\u043E\\u0448\\u0443\\u043A \\u043D\\u0430 Google \\u041A\\u0430\\u0440\\u0442\\u0430\\u0445\"\n      }), data.length !== 0 ? /*#__PURE__*/_jsx(\"select\", {\n        className: css(searchStyles.select),\n        size: data.length,\n        id: \"description\",\n        name: \"description\",\n        onChange: handleChange,\n        onBlur: handleBlur,\n        children: status === 'OK' && data.map((value, index) => {\n          return /*#__PURE__*/_jsx(\"option\", {\n            className: css(searchStyles.option),\n            value: value.description,\n            children: value.description\n          }, index);\n        })\n      }) : null]\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}