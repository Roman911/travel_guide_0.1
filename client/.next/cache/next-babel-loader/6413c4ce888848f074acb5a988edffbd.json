{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\Search\\\\Containers\\\\Search.tsx\";\nimport React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport { SearchPresent } from \"../Components/SearchPresent\";\nexport const Search = ({\n  panTo\n}) => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      // @ts-ignore\n      location: {\n        lat: () => 49.026151,\n        lng: () => 31.483070\n      },\n      radius: 50 * 1000\n    }\n  });\n  const initialValues = {\n    description: ''\n  };\n\n  const onSubmit = async values => {\n    setValue(values.description, false);\n    clearSuggestions();\n\n    try {\n      const results = await getGeocode({\n        address: values.description\n      });\n      const {\n        lat,\n        lng\n      } = await getLatLng(results[0]);\n      panTo({\n        lat,\n        lng\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    children: formik => {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(SearchPresent, {\n          data: data,\n          formik: formik\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/Search/Containers/Search.tsx"],"names":["React","Formik","Form","usePlacesAutocomplete","getGeocode","getLatLng","SearchPresent","Search","panTo","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","initialValues","description","onSubmit","values","results","address","e","console","log","formik"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,qBAAP,IAAgCC,UAAhC,EAA4CC,SAA5C,QAA6D,yBAA7D;AACA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACnC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAA7B;AAA+CC,IAAAA,QAA/C;AAAyDC,IAAAA;AAAzD,MAA8EZ,qBAAqB,CAAC;AACxGa,IAAAA,cAAc,EAAE;AACd;AACAC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAE,MAAM,SAAb;AAAwBC,QAAAA,GAAG,EAAE,MAAM;AAAnC,OAFI;AAGdC,MAAAA,MAAM,EAAE,KAAK;AAHC;AADwF,GAAD,CAAzG;AAOA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,WAAW,EAAE;AADO,GAAtB;;AAGA,QAAMC,QAAQ,GAAG,MAAOC,MAAP,IAAkB;AACjCV,IAAAA,QAAQ,CAACU,MAAM,CAACF,WAAR,EAAqB,KAArB,CAAR;AACAP,IAAAA,gBAAgB;;AAChB,QAAI;AACF,YAAMU,OAAO,GAAG,MAAMrB,UAAU,CAAC;AAAEsB,QAAAA,OAAO,EAAEF,MAAM,CAACF;AAAlB,OAAD,CAAhC;AACA,YAAM;AAAEJ,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAe,MAAMd,SAAS,CAACoB,OAAO,CAAC,CAAD,CAAR,CAApC;AACAjB,MAAAA,KAAK,CAAC;AAAEU,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD,CAAL;AACD,KAJD,CAIE,OAAOQ,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAVD;;AAWA,sBAAO,QAAC,MAAD;AAAQ,IAAA,aAAa,EAAGN,aAAxB;AAAwC,IAAA,QAAQ,EAAGE,QAAnD;AAAA,cACJO,MAAM,IAAI;AACT,0BAAO,QAAC,IAAD;AAAA,+BACL,QAAC,aAAD;AAAe,UAAA,IAAI,EAAGjB,IAAtB;AAA6B,UAAA,MAAM,EAAGiB;AAAtC;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,cAAP;AAGD;AALI;AAAA;AAAA;AAAA;AAAA,UAAP;AAOD,CA7BM","sourcesContent":["import React from \"react\"\r\nimport { Formik, Form } from \"formik\"\r\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete'\r\nimport { SearchPresent } from \"../Components/SearchPresent\"\r\n\r\nexport const Search = ({ panTo }) => {\r\n  const { ready, value, suggestions: { status, data }, setValue, clearSuggestions } = usePlacesAutocomplete({\r\n    requestOptions: {\r\n      // @ts-ignore\r\n      location: { lat: () => 49.026151, lng: () => 31.483070 },\r\n      radius: 50 * 1000\r\n    },\r\n  })\r\n  const initialValues = {\r\n    description: ''\r\n  }\r\n  const onSubmit = async (values) => {\r\n    setValue(values.description, false)\r\n    clearSuggestions()\r\n    try {\r\n      const results = await getGeocode({ address: values.description })\r\n      const { lat, lng } = await getLatLng(results[0])\r\n      panTo({ lat, lng })\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  return <Formik initialValues={ initialValues } onSubmit={ onSubmit } >\r\n    {formik => {\r\n      return <Form >\r\n        <SearchPresent data={ data } formik={ formik } />\r\n      </Form>\r\n    }}\r\n  </Formik>\r\n}"]},"metadata":{},"sourceType":"module"}