{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { InformLocation } from \"../Components/InformLocation\";\nimport { modalActions } from \"../../../redux/actions\";\nimport { locationUserQuery } from './querys';\nimport { addLocationsUserListMutation } from \"./mutations\";\nimport { Loading } from \"../../../Components\";\nexport const InformUserLocation = ({\n  user,\n  locationId\n}) => {\n  const dispatch = useDispatch();\n  const [addLocationsUserList] = useMutation(addLocationsUserListMutation);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(locationUserQuery, {\n    variables: {\n      userId: user.data.userId,\n      locationId: locationId\n    }\n  });\n\n  const addLocationMyList = action => {\n    const {\n      locationUser\n    } = data;\n    const variables = {\n      userId: user.data.userId,\n      locationId: locationId,\n      action: action\n    };\n    locationUser && (variables._id = locationUser._id);\n    addLocationsUserList({\n      variables: variables,\n      refetchQueries: [{\n        query: locationUserQuery,\n        variables: {\n          userId: user.data.userId,\n          locationId: locationId\n        }\n      }]\n    }).then(data => {\n      if (data) {\n        dispatch(modalActions.showModal('Локація успішно добавлена у ваш список'));\n      }\n    });\n  };\n\n  if (loading) return /*#__PURE__*/_jsx(Loading, {});\n  if (error) return `Error! ${error}`;\n  const {\n    locationUser\n  } = data;\n  return /*#__PURE__*/_jsx(InformLocation, {\n    addLocationMyList: addLocationMyList,\n    locationUser: locationUser\n  });\n};","map":null,"metadata":{},"sourceType":"module"}