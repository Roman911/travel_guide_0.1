{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\GoogleMaps\\\\Containers\\\\GoogleMaps.tsx\";\nimport { useRouter } from \"next/router\";\nimport dynamic from \"next/dynamic\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport { Spin } from \"../../../Components\";\nimport { LocationInformation } from \"../../\";\nimport { MarkersController } from '../Components/MarkersController';\nconst Search = dynamic(() => import('../../Search/Containers/Search'), {\n  loading: () => /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 18\n  }, this),\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../Search/Containers/Search')],\n    modules: ['../../Search/Containers/Search']\n  }\n});\nconst libraries = [\"places\"];\nexport const GoogleMaps = ({\n  mapContainerStyle,\n  center,\n  zoom,\n  locations,\n  disableDefaultUI,\n  click,\n  search\n}) => {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\n    // @ts-ignore\n    libraries\n  });\n  const router = useRouter();\n  const {\n    0: marker,\n    1: setMarker\n  } = useState({\n    control: 'null',\n    options: null\n  });\n  const {\n    0: centerMap,\n    1: setCenterMap\n  } = useState(null);\n  useEffect(() => {\n    setCenterMap(center);\n  }, [center]);\n  useEffect(() => {\n    if (Object.keys(router.query).length !== 0) {\n      if (!router.query.id) {\n        setMarker({\n          control: 'MarkerQuery',\n          options: router.query\n        });\n      } else {\n        setMarker({\n          control: 'MarkerQuery',\n          options: locations\n        });\n      }\n    } else if (locations) {\n      setMarker({\n        control: 'MarkersMap',\n        options: {\n          handleClickToMarker,\n          locations\n        }\n      });\n    }\n  }, [router, locations]);\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    // @ts-ignore\n    mapRef.current.panTo({\n      lat,\n      lng\n    }); // @ts-ignore\n\n    mapRef.current.setZoom(12);\n    setMarker({\n      control: 'MarkerQuery',\n      options: center\n    });\n  }, []);\n  const {\n    0: selectedPark,\n    1: setSelectedPark\n  } = useState(null);\n  const {\n    0: closeWindow,\n    1: setCloseWindow\n  } = useState(false);\n  const handleClick = useCallback(() => {\n    setCloseWindow(true);\n    setTimeout(() => {\n      setSelectedPark(null);\n      setCloseWindow(false);\n    }, 700);\n  }, []);\n  console.log(selectedPark);\n\n  const handleClickToMarker = id => {\n    if (selectedPark) {\n      console.log('true');\n      setCloseWindow(true);\n      setTimeout(() => {\n        setSelectedPark(null);\n        setCloseWindow(false);\n      }, 700);\n    } else {\n      console.log('false');\n      setSelectedPark(id);\n    }\n  };\n\n  const options = {\n    disableDefaultUI: disableDefaultUI\n  };\n\n  const renderMap = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: [search && /*#__PURE__*/_jsxDEV(Search, {\n        panTo: panTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: zoom,\n        center: centerMap,\n        options: options,\n        onLoad: onMapLoad,\n        onClick: click ? event => {\n          click(event);\n          setMarker({\n            control: 'MarkerQuery',\n            options: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng()\n            }\n          });\n        } : null,\n        children: [selectedPark && /*#__PURE__*/_jsxDEV(LocationInformation, {\n          _id: selectedPark,\n          handleClick: handleClick,\n          closeWindow: closeWindow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MarkersController, {\n          control: marker.control,\n          options: marker.options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 12\n    }, this);\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 35\n  }, this);\n};","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/GoogleMaps/Containers/GoogleMaps.tsx"],"names":["useRouter","dynamic","React","useCallback","useEffect","useRef","useState","GoogleMap","useLoadScript","Spin","LocationInformation","MarkersController","Search","loading","libraries","GoogleMaps","mapContainerStyle","center","zoom","locations","disableDefaultUI","click","search","isLoaded","loadError","googleMapsApiKey","process","env","GOOGLE_MAPS_KAY","router","marker","setMarker","control","options","centerMap","setCenterMap","Object","keys","query","length","id","handleClickToMarker","mapRef","onMapLoad","map","current","panTo","lat","lng","setZoom","selectedPark","setSelectedPark","closeWindow","setCloseWindow","handleClick","setTimeout","console","log","renderMap","position","width","event","latLng"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\"\r\nimport dynamic from \"next/dynamic\"\r\nimport React, { useCallback, useEffect, useRef, useState } from \"react\"\r\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api'\r\nimport { Spin } from \"../../../Components\"\r\nimport { LocationInformation } from \"../../\"\r\nimport { Locations } from \"../../../types/locations\"\r\nimport { MarkersController } from '../Components/MarkersController'\r\n\r\ntype SearchProps = {\r\n  panTo: any\r\n}\r\n\r\nconst Search = dynamic<SearchProps>(() => import('../../Search/Containers/Search') as any, {\r\n  loading: () => <Spin />\r\n})\r\n\r\ntype MyGoogleMapsProps = {\r\n  mapContainerStyle: { height: string, width: string }\r\n  center: { lat: number, lng: number }\r\n  zoom: number\r\n  locations?: Locations\r\n  disableDefaultUI: boolean\r\n  click?: (event) => any\r\n  search: boolean\r\n  isType?: string | null\r\n}\r\n\r\nconst libraries = [\"places\"]\r\n\r\nexport const GoogleMaps: React.FC<MyGoogleMapsProps> = ({ mapContainerStyle, center, zoom, locations, disableDefaultUI, click, search }) => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\r\n    // @ts-ignore\r\n    libraries\r\n  })\r\n  const router = useRouter()\r\n  const [ marker, setMarker ] = useState( { control: 'null', options: null } )\r\n  const [ centerMap, setCenterMap ] = useState(null)\r\n\r\n  useEffect(() => {\r\n    setCenterMap(center)\r\n  }, [center])\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(router.query).length !== 0) {\r\n      if (!router.query.id) {\r\n        setMarker({\r\n          control: 'MarkerQuery',\r\n          options: router.query\r\n        })\r\n      } else {\r\n        setMarker({\r\n          control: 'MarkerQuery',\r\n          options: locations\r\n        })\r\n      }\r\n    } else if (locations) {\r\n      setMarker({\r\n        control: 'MarkersMap',\r\n        options: {\r\n          handleClickToMarker,\r\n          locations\r\n        }\r\n      })\r\n    }\r\n  }, [ router, locations ])\r\n\r\n  const mapRef = useRef()\r\n  const onMapLoad = useCallback((map) => {\r\n    mapRef.current = map\r\n  }, [])\r\n  const panTo = useCallback(({ lat, lng }) => {\r\n    // @ts-ignore\r\n    mapRef.current.panTo({ lat, lng })\r\n    // @ts-ignore\r\n    mapRef.current.setZoom(12)\r\n    setMarker({\r\n      control: 'MarkerQuery',\r\n      options: center\r\n    })\r\n  }, [])\r\n\r\n  const [ selectedPark, setSelectedPark ] = useState<null | string>(null)\r\n  const [ closeWindow, setCloseWindow ] = useState<boolean>(false)\r\n  const handleClick = useCallback(() => {\r\n    setCloseWindow(true)\r\n    setTimeout(() => {\r\n      setSelectedPark(null)\r\n      setCloseWindow(false)\r\n    }, 700)\r\n  }, [])\r\n  console.log(selectedPark)\r\n  const handleClickToMarker = (id) => {\r\n    if (selectedPark) {\r\n      console.log('true')\r\n      setCloseWindow(true)\r\n      setTimeout(() => {\r\n        setSelectedPark(null)\r\n        setCloseWindow(false)\r\n      }, 700)\r\n    } else {\r\n      console.log('false')\r\n      setSelectedPark(id)\r\n    }\r\n  }\r\n  const options = {\r\n    disableDefaultUI: disableDefaultUI\r\n  }\r\n  const renderMap = () => {\r\n    return <div style={{ position: 'relative', width: '100%' }}>\r\n      { search && <Search panTo={ panTo } /> }\r\n      <GoogleMap\r\n        mapContainerStyle={ mapContainerStyle }\r\n        zoom={ zoom }\r\n        center={ centerMap }\r\n        options={ options }\r\n        onLoad={ onMapLoad }\r\n        onClick={ click ? (event) => {\r\n          click(event)\r\n          setMarker({\r\n            control: 'MarkerQuery',\r\n            options: {\r\n              lat: event.latLng.lat(),\r\n              lng: event.latLng.lng()\r\n            }\r\n          })\r\n        } : null}\r\n      >\r\n        { selectedPark && <LocationInformation _id={ selectedPark } handleClick={ handleClick } closeWindow={ closeWindow } /> }\r\n        <MarkersController control={ marker.control } options={ marker.options } />\r\n      </GoogleMap>\r\n    </div>\r\n  }\r\n  if (loadError) {\r\n    return <div>Неможливо завантажити карту</div>\r\n  }\r\n  return isLoaded ? renderMap() : <Spin />\r\n}"]},"metadata":{},"sourceType":"module"}