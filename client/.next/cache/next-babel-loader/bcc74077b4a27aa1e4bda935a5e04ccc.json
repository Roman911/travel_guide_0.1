{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Like } from '../Components/Like';\nimport { addLikeMutation, removeLikeMutation } from './mutations';\nimport { modalActions } from \"../../../redux/actions\";\nexport const Likes = ({\n  id,\n  likes,\n  post\n}) => {\n  const {\n    0: quantityLikes,\n    1: setQuantityLikes\n  } = useState(likes.length);\n  const {\n    0: userLike,\n    1: setUserLike\n  } = useState(false);\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    data\n  } = user;\n  const userId = data ? data.userId : undefined;\n  useEffect(() => {\n    likes.filter(item => {\n      if (item === userId) {\n        setUserLike(true);\n      } else {\n        setUserLike(false);\n      }\n    });\n  }, [likes, userId]);\n  const [addLike] = useMutation(addLikeMutation);\n  const [removeLike] = useMutation(removeLikeMutation);\n\n  const handleChangeAdd = () => {\n    setQuantityLikes(quantityLikes + 1);\n    setUserLike(true);\n\n    if (userId) {\n      addLike({\n        variables: {\n          postId: id,\n          userId: userId\n        }\n      }).then(r => r);\n    } else {\n      dispatch(modalActions.showModal('Для виконання данної дії потрібно авторизоватись'));\n    }\n  };\n\n  const handleChangeRemove = () => {\n    setQuantityLikes(quantityLikes - 1);\n    setUserLike(false);\n    removeLike({\n      variables: {\n        postId: id,\n        userId: userId\n      }\n    }).then(r => r);\n  };\n\n  return /*#__PURE__*/_jsx(Like, {\n    post: post,\n    quantityLikes: quantityLikes,\n    userLike: userLike,\n    handleChangeAdd: handleChangeAdd,\n    handleChangeRemove: handleChangeRemove\n  });\n};","map":null,"metadata":{},"sourceType":"module"}