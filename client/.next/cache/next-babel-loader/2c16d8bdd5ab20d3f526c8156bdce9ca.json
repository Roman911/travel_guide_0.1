{"ast":null,"code":"import _slicedToArray from \"D:/web/travel_guide/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useFormikContext, Formik, Form } from \"formik\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { css } from \"aphrodite/no-important\";\nimport * as Yup from 'yup';\nimport { addLocationMutation } from \"./mutations\";\nimport { modalActions } from '../../../redux/actions';\nimport baseStyle from '../../../styles';\nimport styles from '../Components/styles';\nimport { CreateLocation } from \"../Components/CreateLocation\";\nexport var CreateLocationSelector = function CreateLocationSelector(_ref) {\n  var latLng = _ref.latLng,\n      isTypeSelect = _ref.isTypeSelect;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      data = _useSelector.data;\n\n  var _useMutation = useMutation(addLocationMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createLocations = _useMutation2[0];\n\n  var initialValues = {\n    title: '',\n    cover: '',\n    small_text: '',\n    linkToPost: '',\n    coordinateY: '0.00000',\n    coordinateX: '0.00000',\n    isType: 'other',\n    region: '',\n    district: '',\n    city: '',\n    street: ''\n  };\n  var validationSchema = Yup.object({\n    title: Yup.string().min(5, 'Коротка назва').max(50, 'Дуже велика назва').required('Required')\n  });\n\n  var onSubmit = function onSubmit(values, onSubmitProps) {\n    var coordinates = [values.coordinateY, values.coordinateX];\n    var idAuthor = data ? data.userId : null;\n    createLocations({\n      variables: {\n        locationsInput: {\n          idAuthor: idAuthor,\n          title: values.title,\n          cover: values.cover,\n          linkToPost: values.linkToPost,\n          small_text: values.small_text,\n          coordinates: coordinates,\n          isType: values.isType,\n          region: values.region,\n          district: values.district,\n          city: values.city,\n          street: values.street\n        }\n      }\n    }).then(function (data) {\n      if (data) {\n        dispatch(modalActions.showModal('Локація успішно добавлена!'));\n        onSubmitProps.resetForm();\n      }\n\n      onSubmitProps.setSubmitting(false);\n    })[\"catch\"](function () {\n      onSubmitProps.setSubmitting(false);\n    });\n  };\n\n  var AutoRef = function AutoRef() {\n    var _useFormikContext = useFormikContext(),\n        values = _useFormikContext.values,\n        setFieldValue = _useFormikContext.setFieldValue;\n\n    useEffect(function () {\n      if (latLng) {\n        setFieldValue('coordinateY', String(latLng.coordinateY));\n        setFieldValue('coordinateX', String(latLng.coordinateX));\n      }\n    }, [latLng]);\n    useEffect(function () {\n      // @ts-ignore\n      isTypeSelect(values.isType); // @ts-ignore\n    }, [values.isType]);\n    return null;\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: css(baseStyle.boxShadow, styles.wrapper),\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: initialValues,\n      onSubmit: onSubmit,\n      validationSchema: validationSchema,\n      children: function children(formik) {\n        return /*#__PURE__*/_jsxs(Form, {\n          children: [/*#__PURE__*/_jsx(CreateLocation, {\n            formik: formik\n          }), /*#__PURE__*/_jsx(AutoRef, {})]\n        });\n      }\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}