{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\Containers\\\\GoogleMaps\\\\Search.tsx\";\nimport React from \"react\";\nimport { useFormik } from \"formik\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport searchStyles from '../../styles/search';\nimport { css } from \"aphrodite/no-important\";\nexport const Search = ({\n  panTo\n}) => {\n  const {\n    ready,\n    value,\n    suggestions: {\n      status,\n      data\n    },\n    setValue,\n    clearSuggestions\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      // @ts-ignore\n      location: {\n        lat: () => 49.026151,\n        lng: () => 31.483070\n      },\n      radius: 50 * 1000\n    }\n  });\n  const {\n    handleSubmit,\n    handleChange,\n    handleBlur\n  } = useFormik({\n    initialValues: {\n      description: ''\n    },\n    onSubmit: async values => {\n      setValue(values.description, false);\n      clearSuggestions();\n\n      try {\n        const results = await getGeocode({\n          address: values.description\n        });\n        const {\n          lat,\n          lng\n        } = await getLatLng(results[0]);\n        panTo({\n          lat,\n          lng\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: css(searchStyles.wrapper),\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onClick: handleSubmit,\n      className: css(searchStyles.form),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: css(searchStyles.input),\n        type: \"text\",\n        value: value,\n        onChange: e => {\n          setValue(e.target.value);\n        },\n        disabled: !ready,\n        placeholder: \"\\u041F\\u043E\\u0448\\u0443\\u043A \\u043D\\u0430 Google \\u041A\\u0430\\u0440\\u0442\\u0430\\u0445\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), data.length !== 0 ? /*#__PURE__*/_jsxDEV(\"select\", {\n        className: css(searchStyles.select),\n        size: data.length,\n        id: \"description\",\n        name: \"description\",\n        onChange: handleChange,\n        onBlur: handleBlur,\n        children: status === 'OK' && data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(\"option\", {\n            className: css(searchStyles.option),\n            value: value.description,\n            children: value.description\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 29\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 10\n  }, this);\n};","map":{"version":3,"sources":["D:/web/travel_guide/client/Containers/GoogleMaps/Search.tsx"],"names":["React","useFormik","usePlacesAutocomplete","getGeocode","getLatLng","searchStyles","css","Search","panTo","ready","value","suggestions","status","data","setValue","clearSuggestions","requestOptions","location","lat","lng","radius","handleSubmit","handleChange","handleBlur","initialValues","description","onSubmit","values","results","address","e","console","log","wrapper","form","input","target","length","select","map","index","option"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport { useFormik } from \"formik\"\r\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete'\r\nimport searchStyles from '../../styles/search'\r\nimport { css } from \"aphrodite/no-important\"\r\n\r\nexport const Search = ({ panTo }) => {\r\n  const { ready, value, suggestions: { status, data }, setValue, clearSuggestions } = usePlacesAutocomplete({\r\n    requestOptions: {\r\n      // @ts-ignore\r\n      location: { lat: () => 49.026151, lng: () => 31.483070 },\r\n      radius: 50 * 1000\r\n    },\r\n  })\r\n  const { handleSubmit, handleChange, handleBlur } = useFormik({\r\n    initialValues: {\r\n      description: ''\r\n    },\r\n    onSubmit: async (values) => {\r\n      setValue(values.description, false)\r\n      clearSuggestions()\r\n      try {\r\n        const results = await getGeocode({ address: values.description })\r\n        const { lat, lng } = await getLatLng(results[0])\r\n        panTo({ lat, lng })\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n  })\r\n  return <div className={ css(searchStyles.wrapper) }>\r\n    <form onClick={ handleSubmit } className={ css(searchStyles.form) }>\r\n      <input\r\n        className={ css(searchStyles.input) }\r\n        type=\"text\"\r\n        value={ value }\r\n        onChange={ (e) => {\r\n          setValue(e.target.value)\r\n        }}\r\n        disabled={!ready}\r\n        placeholder='Пошук на Google Картах'\r\n      />\r\n      { data.length !== 0 ? <select className={ css(searchStyles.select) } size={ data.length } id='description' name='description' onChange={ handleChange } onBlur={ handleBlur }>\r\n        { status === 'OK' && data.map((value, index) => {\r\n          return <option className={ css(searchStyles.option) } key={index} value={value.description}>{value.description}</option>\r\n        }) }\r\n      </select> : null }\r\n    </form>\r\n  </div>\r\n}"]},"metadata":{},"sourceType":"module"}