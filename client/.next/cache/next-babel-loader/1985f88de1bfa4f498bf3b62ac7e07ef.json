{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useFormikContext, Formik, Form } from \"formik\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { css } from \"aphrodite/no-important\";\nimport * as Yup from 'yup';\nimport { addLocationMutation } from \"./mutations\";\nimport { modalActions } from '../../../redux/actions';\nimport baseStyle from '../../../styles';\nimport styles from '../Components/styles';\nimport { CreateLocation } from \"../Components/CreateLocation\";\nexport const CreateLocationSelector = ({\n  latLng,\n  isTypeSelect\n}) => {\n  const dispatch = useDispatch();\n  const {\n    data\n  } = useSelector(state => state.user);\n  const [createLocations] = useMutation(addLocationMutation);\n  const initialValues = {\n    title: '',\n    cover: '',\n    small_text: '',\n    linkToPost: '',\n    coordinateY: '0.00000',\n    coordinateX: '0.00000',\n    isType: 'other',\n    location: ['Київська обл.', 'м. Київ', 'вул. Хрещатик']\n  };\n  const validationSchema = Yup.object({\n    title: Yup.string().min(5, 'Коротка назва').max(50, 'Дуже велика назва').required('Required')\n  });\n\n  const onSubmit = (values, onSubmitProps) => {\n    console.log(values);\n    const coordinates = [values.coordinateY, values.coordinateX];\n    const idAuthor = data ? data.userId : null;\n    createLocations({\n      variables: {\n        locationsInput: {\n          idAuthor: idAuthor,\n          title: values.title,\n          cover: values.cover,\n          linkToPost: values.linkToPost,\n          small_text: values.small_text,\n          coordinates: coordinates,\n          isType: values.isType,\n          location: values.location\n        }\n      }\n    }).then(data => {\n      if (data) {\n        dispatch(modalActions.showModal('Локація успішно добавлена!'));\n        onSubmitProps.resetForm();\n      }\n\n      onSubmitProps.setSubmitting(false);\n    }).catch(() => {\n      onSubmitProps.setSubmitting(false);\n    });\n  };\n\n  const AutoRef = () => {\n    const {\n      values,\n      setFieldValue\n    } = useFormikContext();\n    useEffect(() => {\n      if (latLng) {\n        setFieldValue('coordinateY', String(latLng.coordinateY));\n        setFieldValue('coordinateX', String(latLng.coordinateX));\n      }\n    }, [latLng]);\n    useEffect(() => {\n      // @ts-ignore\n      isTypeSelect(values.isType); // @ts-ignore\n    }, [values.isType]);\n    return null;\n  };\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: css(baseStyle.boxShadow, styles.wrapper),\n    children: /*#__PURE__*/_jsx(Formik, {\n      initialValues: initialValues,\n      onSubmit: onSubmit,\n      validationSchema: validationSchema,\n      children: formik => {\n        return /*#__PURE__*/_jsxs(Form, {\n          children: [/*#__PURE__*/_jsx(CreateLocation, {\n            formik: formik\n          }), /*#__PURE__*/_jsx(AutoRef, {})]\n        });\n      }\n    })\n  });\n};","map":null,"metadata":{},"sourceType":"module"}