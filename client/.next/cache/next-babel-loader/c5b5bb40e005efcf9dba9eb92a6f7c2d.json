{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\GoogleMaps\\\\Containers\\\\GoogleMaps.tsx\";\nimport { useRouter } from \"next/router\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport { Spin } from \"../../../Components\";\nimport { LocationInformation } from \"../../\";\nimport { Search } from \"../../../Containers/GoogleMaps/Search\";\nimport { MarkersController } from '../Components/MarkersController';\nconst libraries = [\"places\"];\nexport const GoogleMaps = ({\n  mapContainerStyle,\n  center,\n  zoom,\n  locations,\n  disableDefaultUI,\n  click,\n  search,\n  isType\n}) => {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\n    // @ts-ignore\n    libraries\n  });\n  const router = useRouter();\n  const {\n    0: optionsMarker,\n    1: setOptionsMarker\n  } = useState(null);\n  const {\n    0: controlMarker,\n    1: setControlMarker\n  } = useState('MarkersMap');\n  useEffect(() => {\n    if (Object.keys(router.query).length !== 0) {\n      setOptionsMarker(router.query);\n      setControlMarker('MarkerQuery');\n    }\n  }, [router]);\n  console.log(optionsMarker, controlMarker);\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    // @ts-ignore\n    mapRef.current.panTo({\n      lat,\n      lng\n    }); // @ts-ignore\n\n    mapRef.current.setZoom(12);\n    setControlMarker('SearchMarker');\n  }, []);\n  const {\n    0: marker,\n    1: setMarker\n  } = useState(null);\n  const {\n    0: selectedPark,\n    1: setSelectedPark\n  } = useState(null);\n  const {\n    0: closeWindow,\n    1: setCloseWindow\n  } = useState(false);\n  const handleClick = useCallback(() => {\n    setCloseWindow(true);\n    setTimeout(() => {\n      setSelectedPark(null);\n      setCloseWindow(false);\n    }, 700);\n  }, []);\n  const options = {\n    disableDefaultUI: disableDefaultUI\n  };\n\n  const renderMap = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: [search && /*#__PURE__*/_jsxDEV(Search, {\n        panTo: panTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: zoom,\n        center: center,\n        options: options,\n        onLoad: onMapLoad,\n        onClick: click ? event => {\n          click(event);\n          setMarker({\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          });\n        } : null,\n        children: [selectedPark && /*#__PURE__*/_jsxDEV(LocationInformation, {\n          _id: selectedPark,\n          handleClick: handleClick,\n          closeWindow: closeWindow\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(MarkersController, {\n          control: controlMarker,\n          options: optionsMarker\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 12\n    }, this);\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/_jsxDEV(Spin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 35\n  }, this);\n};","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/GoogleMaps/Containers/GoogleMaps.tsx"],"names":["useRouter","React","useCallback","useEffect","useRef","useState","GoogleMap","useLoadScript","Spin","LocationInformation","Search","MarkersController","libraries","GoogleMaps","mapContainerStyle","center","zoom","locations","disableDefaultUI","click","search","isType","isLoaded","loadError","googleMapsApiKey","process","env","GOOGLE_MAPS_KAY","router","optionsMarker","setOptionsMarker","controlMarker","setControlMarker","Object","keys","query","length","console","log","mapRef","onMapLoad","map","current","panTo","lat","lng","setZoom","marker","setMarker","selectedPark","setSelectedPark","closeWindow","setCloseWindow","handleClick","setTimeout","options","renderMap","position","width","event","latLng"],"mappings":"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","sourcesContent":["import { useRouter } from \"next/router\"\r\nimport React, {useCallback, useEffect, useRef, useState} from \"react\"\r\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api'\r\nimport { Spin } from \"../../../Components\"\r\nimport { LocationInformation } from \"../../\"\r\nimport { Search } from \"../../../Containers/GoogleMaps/Search\"\r\nimport { Locations } from \"../../../types/locations\"\r\n\r\nimport { MarkersController } from '../Components/MarkersController'\r\n\r\ntype MyGoogleMapsProps = {\r\n  mapContainerStyle: { height: string, width: string }\r\n  center: { lat: number, lng: number }\r\n  zoom: number\r\n  locations?: Locations\r\n  disableDefaultUI: boolean\r\n  click?: (event) => any\r\n  search: boolean\r\n  isType?: string | null\r\n}\r\ntype latLng = {\r\n  lat: number\r\n  lng: number\r\n}\r\n\r\nconst libraries = [\"places\"]\r\n\r\nexport const GoogleMaps: React.FC<MyGoogleMapsProps> = ({ mapContainerStyle, center, zoom, locations, disableDefaultUI, click, search, isType }) => {\r\n  const { isLoaded, loadError } = useLoadScript({\r\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\r\n    // @ts-ignore\r\n    libraries\r\n  })\r\n  const router = useRouter()\r\n  const [ optionsMarker, setOptionsMarker ] = useState( null )\r\n  const [ controlMarker, setControlMarker ] = useState( 'MarkersMap' )\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(router.query).length !== 0) {\r\n      setOptionsMarker(router.query)\r\n      setControlMarker('MarkerQuery')\r\n    }\r\n  }, [ router ])\r\n\r\n  console.log(optionsMarker, controlMarker)\r\n\r\n  const mapRef = useRef()\r\n  const onMapLoad = useCallback((map) => {\r\n    mapRef.current = map\r\n  }, [])\r\n  const panTo = useCallback(({ lat, lng }) => {\r\n    // @ts-ignore\r\n    mapRef.current.panTo({ lat, lng })\r\n    // @ts-ignore\r\n    mapRef.current.setZoom(12)\r\n    setControlMarker('SearchMarker')\r\n  }, [])\r\n\r\n  const [ marker, setMarker ] = useState<null | latLng>(null)\r\n  const [ selectedPark, setSelectedPark ] = useState<null | string>(null)\r\n  const [ closeWindow, setCloseWindow ] = useState<boolean>(false)\r\n  const handleClick = useCallback(() => {\r\n    setCloseWindow(true)\r\n    setTimeout(() => {\r\n      setSelectedPark(null)\r\n      setCloseWindow(false)\r\n    }, 700)\r\n  }, [])\r\n  const options = {\r\n    disableDefaultUI: disableDefaultUI\r\n  }\r\n  const renderMap = () => {\r\n    return <div style={{position: 'relative', width: '100%'}}>\r\n      { search && <Search panTo={ panTo } /> }\r\n      <GoogleMap\r\n        mapContainerStyle={ mapContainerStyle }\r\n        zoom={ zoom }\r\n        center={ center }\r\n        options={ options }\r\n        onLoad={ onMapLoad }\r\n        onClick={ click ? (event) => {\r\n          click(event)\r\n          setMarker({\r\n            lat: event.latLng.lat(),\r\n            lng: event.latLng.lng()\r\n          })\r\n        } : null}\r\n      >\r\n        { selectedPark && <LocationInformation _id={ selectedPark } handleClick={ handleClick } closeWindow={ closeWindow } /> }\r\n        {/*{ !router.query && locations && locations.map((park, index) => (*/}\r\n        {/*  <Marker*/}\r\n        {/*    key={ index }*/}\r\n        {/*    onClick={() => {*/}\r\n        {/*      setSelectedPark(park._id )*/}\r\n        {/*    }}*/}\r\n        {/*    position={{lat: Number(park.coordinates[0]), lng: Number(park.coordinates[1])}}*/}\r\n        {/*    icon={{*/}\r\n        {/*      url: `http://326b53d9806dcac09833-a590b81c812a57d0f4b1c3b1d1b7a9ea.r50.cf3.rackcdn.com/markersIcon/${park.isType}.png`*/}\r\n        {/*    }}*/}\r\n        {/*  />*/}\r\n        {/*))}*/}\r\n        {/*{ marker && <Marker*/}\r\n        {/*  position={{ lat: marker.lat, lng: marker.lng }}*/}\r\n        {/*  icon={ isType !== 'other' ? { url: `http://326b53d9806dcac09833-a590b81c812a57d0f4b1c3b1d1b7a9ea.r50.cf3.rackcdn.com/markersIcon/${isType}.png` } : null }*/}\r\n        {/*/> }*/}\r\n        <MarkersController control={ controlMarker } options={ optionsMarker } />\r\n      </GoogleMap>\r\n    </div>\r\n  }\r\n  if (loadError) {\r\n    return <div>Неможливо завантажити карту</div>\r\n  }\r\n  return isLoaded ? renderMap() : <Spin />\r\n}"]},"metadata":{},"sourceType":"module"}