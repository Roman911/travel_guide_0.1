{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useCallback, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript, Marker } from '@react-google-maps/api';\nimport { Loading } from \"../../Components\";\nimport { LocationInformation } from \"../../modules\";\nimport { Search } from \"./Search\";\nconst libraries = [\"places\"];\nexport const GoogleMaps = ({\n  mapContainerStyle,\n  center,\n  zoom,\n  locations,\n  disableDefaultUI,\n  click,\n  search,\n  isType\n}) => {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\n    // @ts-ignore\n    libraries\n  });\n  const {\n    0: searchMarker,\n    1: setSearchMarker\n  } = useState(false);\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    // @ts-ignore\n    mapRef.current.panTo({\n      lat,\n      lng\n    }); // @ts-ignore\n\n    mapRef.current.setZoom(12);\n    setSearchMarker(true);\n  }, []);\n  const {\n    0: marker,\n    1: setMarker\n  } = useState(null);\n  const {\n    0: selectedPark,\n    1: setSelectedPark\n  } = useState(null);\n  const {\n    0: closeWindow,\n    1: setCloseWindow\n  } = useState(false);\n  const handleClick = useCallback(() => {\n    setCloseWindow(true);\n    setTimeout(() => {\n      setSelectedPark(null);\n      setCloseWindow(false);\n    }, 700);\n  }, []);\n  const options = {\n    disableDefaultUI: disableDefaultUI\n  };\n\n  const renderMap = () => {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: [console.log(center, zoom), search && /*#__PURE__*/_jsx(Search, {\n        panTo: panTo\n      }), /*#__PURE__*/_jsxs(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: zoom,\n        center: center,\n        options: options,\n        onLoad: onMapLoad,\n        onClick: click ? event => {\n          click(event);\n          setMarker({\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          });\n        } : null,\n        children: [selectedPark && /*#__PURE__*/_jsx(LocationInformation, {\n          _id: selectedPark,\n          handleClick: handleClick,\n          closeWindow: closeWindow\n        }), locations && locations.map((park, index) => /*#__PURE__*/_jsx(Marker, {\n          onClick: () => {\n            setSelectedPark(park._id);\n          },\n          position: {\n            lat: Number(park.coordinates[0]),\n            lng: Number(park.coordinates[1])\n          },\n          icon: {\n            url: `http://326b53d9806dcac09833-a590b81c812a57d0f4b1c3b1d1b7a9ea.r50.cf3.rackcdn.com/markersIcon/${park.isType}.png`\n          }\n        }, index)), marker && /*#__PURE__*/_jsx(Marker, {\n          position: {\n            lat: marker.lat,\n            lng: marker.lng\n          },\n          icon: isType !== 'other' ? {\n            url: `http://326b53d9806dcac09833-a590b81c812a57d0f4b1c3b1d1b7a9ea.r50.cf3.rackcdn.com/markersIcon/${isType}.png`\n          } : null\n        }), searchMarker && /*#__PURE__*/_jsx(Marker, {\n          position: center\n        })]\n      })]\n    });\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n    });\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/_jsx(Loading, {});\n};","map":null,"metadata":{},"sourceType":"module"}