{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useRouter } from \"next/router\";\nimport dynamic from \"next/dynamic\";\nimport React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport { Spin } from \"../../../Components\";\nimport { LocationInformation } from \"../../\";\nimport { MarkersController } from '../Components/MarkersController';\nconst Search = dynamic(() => import('../../Search/Containers/Search'), {\n  loading: () => /*#__PURE__*/_jsx(Spin, {}),\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('../../Search/Containers/Search')],\n    modules: ['../../Search/Containers/Search']\n  }\n});\nconst libraries = [\"places\"];\nexport const GoogleMaps = ({\n  mapContainerStyle,\n  center,\n  zoom,\n  locations,\n  disableDefaultUI,\n  click,\n  search\n}) => {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey: process.env.GOOGLE_MAPS_KAY,\n    // @ts-ignore\n    libraries\n  });\n  const router = useRouter();\n  const {\n    0: marker,\n    1: setMarker\n  } = useState({\n    control: 'null',\n    options: null\n  });\n  const {\n    0: centerMap,\n    1: setCenterMap\n  } = useState(null);\n  useEffect(() => {\n    setCenterMap(center);\n  }, [center]);\n  useEffect(() => {\n    if (Object.keys(router.query).length !== 0) {\n      if (!router.query.id) {\n        setMarker({\n          control: 'MarkerQuery',\n          options: router.query\n        });\n      } else {\n        setMarker({\n          control: 'MarkerQuery',\n          options: locations\n        });\n      }\n    } else if (locations) {\n      setMarker({\n        control: 'MarkersMap',\n        options: {\n          setSelectedPark,\n          locations\n        }\n      });\n    }\n  }, [router, locations]);\n  const mapRef = useRef();\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n  }, []);\n  const panTo = useCallback(({\n    lat,\n    lng\n  }) => {\n    // @ts-ignore\n    mapRef.current.panTo({\n      lat,\n      lng\n    }); // @ts-ignore\n\n    mapRef.current.setZoom(12);\n    setMarker({\n      control: 'MarkerQuery',\n      options: center\n    });\n  }, []);\n  const {\n    0: selectedPark,\n    1: setSelectedPark\n  } = useState(null);\n  const {\n    0: closeWindow,\n    1: setCloseWindow\n  } = useState(false);\n  const handleClick = useCallback(() => {\n    setCloseWindow(true);\n    setTimeout(() => {\n      setSelectedPark(null);\n      setCloseWindow(false);\n    }, 700);\n  }, []);\n  const options = {\n    disableDefaultUI: disableDefaultUI\n  };\n\n  const renderMap = () => {\n    return /*#__PURE__*/_jsxs(\"div\", {\n      style: {\n        position: 'relative',\n        width: '100%'\n      },\n      children: [search && /*#__PURE__*/_jsx(Search, {\n        panTo: panTo\n      }), /*#__PURE__*/_jsxs(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: zoom,\n        center: centerMap,\n        options: options,\n        onLoad: onMapLoad,\n        onClick: click ? event => {\n          click(event);\n          setMarker({\n            control: 'MarkerQuery',\n            options: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng()\n            }\n          });\n        } : null,\n        children: [selectedPark && /*#__PURE__*/_jsx(LocationInformation, {\n          _id: selectedPark,\n          handleClick: handleClick,\n          closeWindow: closeWindow\n        }), /*#__PURE__*/_jsx(MarkersController, {\n          control: marker.control,\n          options: marker.options\n        })]\n      })]\n    });\n  };\n\n  if (loadError) {\n    return /*#__PURE__*/_jsx(\"div\", {\n      children: \"\\u041D\\u0435\\u043C\\u043E\\u0436\\u043B\\u0438\\u0432\\u043E \\u0437\\u0430\\u0432\\u0430\\u043D\\u0442\\u0430\\u0436\\u0438\\u0442\\u0438 \\u043A\\u0430\\u0440\\u0442\\u0443\"\n    });\n  }\n\n  return isLoaded ? renderMap() : /*#__PURE__*/_jsx(Spin, {});\n};","map":null,"metadata":{},"sourceType":"module"}