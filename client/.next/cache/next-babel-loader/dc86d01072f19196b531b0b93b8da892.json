{"ast":null,"code":"import _regeneratorRuntime from \"D:/web/travel_guide/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/web/travel_guide/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\Search\\\\Containers\\\\Search.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete';\nimport { SearchPresent } from \"../Components/SearchPresent\";\nexport var Search = function Search(_ref) {\n  _s();\n\n  var panTo = _ref.panTo;\n\n  var _usePlacesAutocomplet = usePlacesAutocomplete({\n    requestOptions: {\n      // @ts-ignore\n      location: {\n        lat: function lat() {\n          return 49.026151;\n        },\n        lng: function lng() {\n          return 31.483070;\n        }\n      },\n      radius: 50 * 1000\n    }\n  }),\n      ready = _usePlacesAutocomplet.ready,\n      value = _usePlacesAutocomplet.value,\n      _usePlacesAutocomplet2 = _usePlacesAutocomplet.suggestions,\n      status = _usePlacesAutocomplet2.status,\n      data = _usePlacesAutocomplet2.data,\n      setValue = _usePlacesAutocomplet.setValue,\n      clearSuggestions = _usePlacesAutocomplet.clearSuggestions;\n\n  var initialValues = {\n    description: ''\n  };\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n      var results, _yield$getLatLng, lat, lng;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setValue(values.description, false);\n              clearSuggestions();\n              _context.prev = 2;\n              _context.next = 5;\n              return getGeocode({\n                address: values.description\n              });\n\n            case 5:\n              results = _context.sent;\n              _context.next = 8;\n              return getLatLng(results[0]);\n\n            case 8:\n              _yield$getLatLng = _context.sent;\n              lat = _yield$getLatLng.lat;\n              lng = _yield$getLatLng.lng;\n              panTo({\n                lat: lat,\n                lng: lng\n              });\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](2);\n              console.log(_context.t0);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 14]]);\n    }));\n\n    return function onSubmit(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    children: function children(formik) {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        onClick: onSubmit,\n        children: /*#__PURE__*/_jsxDEV(SearchPresent, {\n          data: data,\n          formik: formik,\n          value: value,\n          setValue: setValue,\n          ready: ready,\n          status: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 9\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(Search, \"I3lrUC33pdqiXvC1QcGoJ0/giUk=\", false, function () {\n  return [usePlacesAutocomplete];\n});\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/Search/Containers/Search.tsx"],"names":["React","Formik","Form","usePlacesAutocomplete","getGeocode","getLatLng","SearchPresent","Search","panTo","requestOptions","location","lat","lng","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","initialValues","description","onSubmit","values","address","results","console","log","formik"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,qBAAP,IAAgCC,UAAhC,EAA4CC,SAA5C,QAA6D,yBAA7D;AACA,SAASC,aAAT,QAA8B,6BAA9B;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAe;AAAA;;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,8BACiDL,qBAAqB,CAAC;AACxGM,IAAAA,cAAc,EAAE;AACd;AACAC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,GAAG,EAAE;AAAA,iBAAM,SAAN;AAAA,SAAP;AAAwBC,QAAAA,GAAG,EAAE;AAAA,iBAAM,SAAN;AAAA;AAA7B,OAFI;AAGdC,MAAAA,MAAM,EAAE,KAAK;AAHC;AADwF,GAAD,CADtE;AAAA,MAC3BC,KAD2B,yBAC3BA,KAD2B;AAAA,MACpBC,KADoB,yBACpBA,KADoB;AAAA,qDACbC,WADa;AAAA,MACEC,MADF,0BACEA,MADF;AAAA,MACUC,IADV,0BACUA,IADV;AAAA,MACkBC,QADlB,yBACkBA,QADlB;AAAA,MAC4BC,gBAD5B,yBAC4BA,gBAD5B;;AAQnC,MAAMC,aAAa,GAAG;AACpBC,IAAAA,WAAW,EAAE;AADO,GAAtB;;AAGA,MAAMC,QAAQ;AAAA,yEAAG,iBAAOC,MAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfL,cAAAA,QAAQ,CAACK,MAAM,CAACF,WAAR,EAAqB,KAArB,CAAR;AACAF,cAAAA,gBAAgB;AAFD;AAAA;AAAA,qBAIShB,UAAU,CAAC;AAAEqB,gBAAAA,OAAO,EAAED,MAAM,CAACF;AAAlB,eAAD,CAJnB;;AAAA;AAIPI,cAAAA,OAJO;AAAA;AAAA,qBAKcrB,SAAS,CAACqB,OAAO,CAAC,CAAD,CAAR,CALvB;;AAAA;AAAA;AAKLf,cAAAA,GALK,oBAKLA,GALK;AAKAC,cAAAA,GALA,oBAKAA,GALA;AAMbJ,cAAAA,KAAK,CAAC;AAAEG,gBAAAA,GAAG,EAAHA,GAAF;AAAOC,gBAAAA,GAAG,EAAHA;AAAP,eAAD,CAAL;AANa;AAAA;;AAAA;AAAA;AAAA;AAQbe,cAAAA,OAAO,CAACC,GAAR;;AARa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARL,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAWA,sBAAO,QAAC,MAAD;AAAQ,IAAA,aAAa,EAAGF,aAAxB;AAAwC,IAAA,QAAQ,EAAGE,QAAnD;AAAA,cACJ,kBAAAM,MAAM,EAAI;AACT,0BAAO,QAAC,IAAD;AAAM,QAAA,OAAO,EAAGN,QAAhB;AAAA,+BACL,QAAC,aAAD;AAAe,UAAA,IAAI,EAAGL,IAAtB;AAA6B,UAAA,MAAM,EAAGW,MAAtC;AAA+C,UAAA,KAAK,EAAGd,KAAvD;AAA+D,UAAA,QAAQ,EAAGI,QAA1E;AAAqF,UAAA,KAAK,EAAGL,KAA7F;AAAqG,UAAA,MAAM,EAAGG;AAA9G;AAAA;AAAA;AAAA;AAAA;AADK;AAAA;AAAA;AAAA;AAAA,eAAP;AAGD;AALI;AAAA;AAAA;AAAA;AAAA,WAAP;AAOD,CA7BM;;GAAMV,M;UACyEJ,qB;;;KADzEI,M","sourcesContent":["import React from \"react\"\r\nimport { Formik, Form } from \"formik\"\r\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from 'use-places-autocomplete'\r\nimport { SearchPresent } from \"../Components/SearchPresent\"\r\n\r\nexport const Search = ({ panTo }) => {\r\n  const { ready, value, suggestions: { status, data }, setValue, clearSuggestions } = usePlacesAutocomplete({\r\n    requestOptions: {\r\n      // @ts-ignore\r\n      location: { lat: () => 49.026151, lng: () => 31.483070 },\r\n      radius: 50 * 1000\r\n    },\r\n  })\r\n  const initialValues = {\r\n    description: ''\r\n  }\r\n  const onSubmit = async (values) => {\r\n    setValue(values.description, false)\r\n    clearSuggestions()\r\n    try {\r\n      const results = await getGeocode({ address: values.description })\r\n      const { lat, lng } = await getLatLng(results[0])\r\n      panTo({ lat, lng })\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }\r\n  return <Formik initialValues={ initialValues } onSubmit={ onSubmit } >\r\n    {formik => {\r\n      return <Form onClick={ onSubmit } >\r\n        <SearchPresent data={ data } formik={ formik } value={ value } setValue={ setValue } ready={ ready } status={ status } />\r\n      </Form>\r\n    }}\r\n  </Formik>\r\n}"]},"metadata":{},"sourceType":"module"}