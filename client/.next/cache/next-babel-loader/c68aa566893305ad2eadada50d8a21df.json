{"ast":null,"code":"import _slicedToArray from \"D:/web/travel_guide/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\web\\\\travel_guide\\\\client\\\\modules\\\\InformUserLocation\\\\Containers\\\\InformUserLocation.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { InformLocation } from \"../Components/InformLocation\";\nimport { modalActions } from \"../../../redux/actions\";\nimport { locationUserQuery } from './querys';\nimport { addLocationsUserListMutation } from \"./mutations\";\nimport { Loading } from \"../../../Components\";\nexport var InformUserLocation = function InformUserLocation(_ref) {\n  _s();\n\n  var user = _ref.user,\n      locationId = _ref.locationId;\n  var dispatch = useDispatch();\n\n  var _useMutation = useMutation(addLocationsUserListMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      addLocationsUserList = _useMutation2[0];\n\n  var _useQuery = useQuery(locationUserQuery, {\n    variables: {\n      userId: user.data.userId,\n      locationId: locationId\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var addLocationMyList = function addLocationMyList(action) {\n    var locationUser = data.locationUser;\n    var variables = {\n      userId: user.data.userId,\n      locationId: locationId,\n      action: action\n    };\n    locationUser && (variables._id = locationUser._id);\n    addLocationsUserList({\n      variables: variables,\n      refetchQueries: [{\n        query: locationUserQuery,\n        variables: {\n          userId: user.data.userId,\n          locationId: locationId\n        }\n      }]\n    }).then(function (data) {\n      if (data) {\n        dispatch(modalActions.showModal('Локація успішно добавлена у ваш список'));\n      }\n    });\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 23\n  }, _this);\n  if (error) return \"Error! \".concat(error);\n  var locationUser = data.locationUser;\n  return /*#__PURE__*/_jsxDEV(InformLocation, {\n    addLocationMyList: addLocationMyList,\n    locationUser: locationUser\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(InformUserLocation, \"1kfveJ41ayEIasUKe+Y2Z5U3yXA=\", false, function () {\n  return [useDispatch, useMutation, useQuery];\n});\n\n_c = InformUserLocation;\n\nvar _c;\n\n$RefreshReg$(_c, \"InformUserLocation\");","map":{"version":3,"sources":["D:/web/travel_guide/client/modules/InformUserLocation/Containers/InformUserLocation.tsx"],"names":["React","useDispatch","useQuery","useMutation","InformLocation","modalActions","locationUserQuery","addLocationsUserListMutation","Loading","InformUserLocation","user","locationId","dispatch","addLocationsUserList","variables","userId","data","loading","error","addLocationMyList","action","locationUser","_id","refetchQueries","query","then","showModal"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,SAASC,iBAAT,QAAkC,UAAlC;AACA,SAASC,4BAAT,QAA6C,aAA7C;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAOA,OAAO,IAAMC,kBAAqD,GAAG,SAAxDA,kBAAwD,OAA+B;AAAA;;AAAA,MAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,MAAtBC,UAAsB,QAAtBA,UAAsB;AAClG,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AADkG,qBAEjEE,WAAW,CAACI,4BAAD,CAFsD;AAAA;AAAA,MAE1FM,oBAF0F;;AAAA,kBAGjEX,QAAQ,CAACI,iBAAD,EAAoB;AAC3DQ,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAEL,IAAI,CAACM,IAAL,CAAUD,MADT;AAETJ,MAAAA,UAAU,EAAEA;AAFH;AADgD,GAApB,CAHyD;AAAA,MAG1FM,OAH0F,aAG1FA,OAH0F;AAAA,MAGjFC,KAHiF,aAGjFA,KAHiF;AAAA,MAG1EF,IAH0E,aAG1EA,IAH0E;;AASlG,MAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAAoB;AAAA,QACpCC,YADoC,GACnBL,IADmB,CACpCK,YADoC;AAE5C,QAAMP,SAA+E,GAAG;AACtFC,MAAAA,MAAM,EAAEL,IAAI,CAACM,IAAL,CAAUD,MADoE;AAEtFJ,MAAAA,UAAU,EAAEA,UAF0E;AAGtFS,MAAAA,MAAM,EAAEA;AAH8E,KAAxF;AAKAC,IAAAA,YAAY,KAAKP,SAAS,CAACQ,GAAV,GAAgBD,YAAY,CAACC,GAAlC,CAAZ;AACAT,IAAAA,oBAAoB,CAAC;AACnBC,MAAAA,SAAS,EAAEA,SADQ;AAEnBS,MAAAA,cAAc,EAAE,CAAC;AACfC,QAAAA,KAAK,EAAElB,iBADQ;AAEfQ,QAAAA,SAAS,EAAE;AACTC,UAAAA,MAAM,EAAEL,IAAI,CAACM,IAAL,CAAUD,MADT;AAETJ,UAAAA,UAAU,EAAEA;AAFH;AAFI,OAAD;AAFG,KAAD,CAApB,CASGc,IATH,CASQ,UAAAT,IAAI,EAAI;AACd,UAAIA,IAAJ,EAAU;AACRJ,QAAAA,QAAQ,CAACP,YAAY,CAACqB,SAAb,CAAuB,wCAAvB,CAAD,CAAR;AACD;AACF,KAbD;AAcD,GAtBD;;AAuBA,MAAIT,OAAJ,EAAa,oBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,WAAP;AACb,MAAIC,KAAJ,EAAW,wBAAiBA,KAAjB;AAjCuF,MAkC1FG,YAlC0F,GAkCzEL,IAlCyE,CAkC1FK,YAlC0F;AAoClG,sBAAO,QAAC,cAAD;AAAgB,IAAA,iBAAiB,EAAGF,iBAApC;AAAwD,IAAA,YAAY,EAAGE;AAAvE;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,CArCM;;GAAMZ,kB;UACMR,W,EACgBE,W,EACAD,Q;;;KAHtBO,kB","sourcesContent":["import React from \"react\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { InformLocation } from \"../Components/InformLocation\"\r\nimport { modalActions } from \"../../../redux/actions\"\r\nimport { User } from \"../../../types/user\"\r\nimport { locationUserQuery } from './querys'\r\nimport { addLocationsUserListMutation } from \"./mutations\"\r\nimport { Loading } from \"../../../Components\"\r\n\r\ntype InformUserLocationProps = {\r\n  user: User\r\n  locationId: string\r\n}\r\n\r\nexport const InformUserLocation: React.FC<InformUserLocationProps> = ({ user, locationId }): any => {\r\n  const dispatch = useDispatch()\r\n  const [ addLocationsUserList ] = useMutation(addLocationsUserListMutation)\r\n  const { loading, error, data } = useQuery(locationUserQuery, {\r\n    variables: {\r\n      userId: user.data.userId,\r\n      locationId: locationId\r\n    }\r\n  })\r\n  const addLocationMyList = (action: string) => {\r\n    const { locationUser } = data\r\n    const variables: { userId: string, locationId: string, action: string, _id?: string } = {\r\n      userId: user.data.userId,\r\n      locationId: locationId,\r\n      action: action\r\n    }\r\n    locationUser && (variables._id = locationUser._id)\r\n    addLocationsUserList({\r\n      variables: variables,\r\n      refetchQueries: [{\r\n        query: locationUserQuery,\r\n        variables: {\r\n          userId: user.data.userId,\r\n          locationId: locationId\r\n        }\r\n      }]\r\n    }).then(data => {\r\n      if (data) {\r\n        dispatch(modalActions.showModal('Локація успішно добавлена у ваш список'))\r\n      }\r\n    })\r\n  }\r\n  if (loading) return <Loading />\r\n  if (error) return `Error! ${error}`\r\n  const { locationUser } = data\r\n\r\n  return <InformLocation addLocationMyList={ addLocationMyList } locationUser={ locationUser } />\r\n}"]},"metadata":{},"sourceType":"module"}